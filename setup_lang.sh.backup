#!/bin/bash

PROJECT_DIR="$1"

if [ -z "$1" ]; then
  echo "Error: PROJECT_DIR parameter is missing, for example nuxt3."
  echo "Usage: $0 <project_directory>"
  exit 1
fi

cd "$PROJECT_DIR" || { echo "Error: Could not change directory to $PROJECT_DIR."; exit 1; }

export NVM_DIR="${XDG_CONFIG_HOME:-$HOME/.nvm}"
if [ -s "$NVM_DIR/nvm.sh" ]; then
  . "$NVM_DIR/nvm.sh"
  nvm use
else
  echo "Error: NVM is not installed or could not be loaded."
  exit 1
fi

# Check if the major version is 18
node_version=$(node -v 2>/dev/null | grep -oP '(?<=^v)\d+')
if [ -z "$node_version" ]; then
  echo "Error: Node.js is not installed."
  exit 1
fi

if [ "$node_version" -eq 18 ]; then
  echo "You are using Node.js version 18."
else
  echo "Warning: You are not using Node.js version 18. Your version is v$node_version."
  exit 1
fi

# copy language files from old site
if [ ! -d "../const-court/lang/json" ]; then
  echo "Error: Source directory ../const-court/lang/json does not exist."
  exit 1
fi
cp -r ../const-court/lang/json/* app/lang/json/ || { echo "Error: Failed to copy language files."; exit 1; }

# issue with VENICE, delete entry for now
find app/lang/json/ -type f -name "*.json" -exec sed -i '/venice/d' {} + || { echo "Error: Failed to process JSON files."; exit 1; }

#npm install @nuxtjs/i18n --save-dev
#jq '.dependencies["@nuxtjs/i18n"] = "latest"' package.json > tmp.json && mv tmp.json package.json

# Use jq to add/update the dependency "@nuxtjs/i18n" in package.json
PACKAGE_NAME="@nuxtjs/i18n"
PACKAGE_VERSION="latest"
jq --arg pkg "$PACKAGE_NAME" --arg version "$PACKAGE_VERSION" \
   '.dependencies[$pkg] = $version' package.json > tmp.json && mv tmp.json package.json

echo "Added or updated $PACKAGE_NAME to version $PACKAGE_VERSION in dependencies."

MODULE_TO_ADD="'@nuxtjs/i18n'"

if [ ! -f "./nuxt.config.ts" ]; then
  echo "Error: nuxt.config.ts not found in the current directory."
  exit 1
elif [ ! -w "./nuxt.config.ts" ]; then
  echo "Error: No write permission for nuxt.config.ts."
  exit 1
fi

# File to modify
config_file="nuxt.config.ts"

# i18n configuration part to insert
i18n_config=$(cat <<'EOT'
  i18n: {
    vueI18n: './i18n.config.ts',
    lazy: true,
    langDir: 'lang/json',
    defaultLocale: 'nl',
    strategy: 'prefix',
    locales: [
      { code: 'en', language: 'en-US', file: 'en.json', name: 'English (US)' },
      { code: 'fr', language: 'fr-FR', file: 'fr.json', name: 'Français (FR)' },
      { code: 'nl', language: 'nl-BE', file: 'nl.json', name: 'Nederlands (BE)' },
      { code: 'de', language: 'de-DE', file: 'de.json', name: 'Deutsch (DE)' },
    ],
    detectBrowserLanguage: {
      useCookie: true,
      cookieKey: 'i18n_redirected',
      fallbackLocale: 'fr',
      redirectOn: 'root',
    },
  },
EOT
)

# Modules part to insert
modules_part='
  modules: [
    "@nuxtjs/i18n",
  ],
'

# 1. Insert i18n configuration
awk -v i18n_config="$i18n_config" '/defineNuxtConfig\({/ { print; print i18n_config; next }1' "$config_file" > temp && mv temp "$config_file"

# 2. Insert modules part
awk -v modules_part="$modules_part" '/defineNuxtConfig\({/ { match($0, /{/) ; printf "%s", substr($0, 1, RSTART) modules_part substr($0, RSTART+1); next }1' "$config_file" > temp && mv temp "$config_file"

# add i18n basic configuration
mkdir -p ./types
cat <<EOF > ./i18n.config.ts
export default defineI18nConfig(() => ({
  legacy: false,
  globalInjection: true,
  locale: "nl",
  fallbackLocale: "fr",
  silentTranslationWarn: false,
}));
EOF

# activate auto-complete for language files
mkdir -p ./types
cat <<EOF > ./types/i18n.ts
// types/i18n.ts
import nl from "~/lang/json/nl.json";

export type MessageSchema = typeof nl;
EOF

# demo page
echo '<script setup lang="ts">
definePageMeta({
  layout: "default"
})

import type { MessageSchema } from "~~/types/i18n.js";
const { t } = useI18n<[MessageSchema], "nl" | "fr" | "en" | "de">();
const $t = useI18n<MessageSchema>().t;

const greeting = t("aria.label.dropdown.input");
</script>

<template>
  <nav>
    <NuxtLink to="/nl/demo/languages">NL</NuxtLink>
    <NuxtLink to="/fr/demo/languages">FR</NuxtLink>
    <NuxtLink to="/de/demo/languages">DE</NuxtLink>
    <NuxtLink to="/en/demo/languages">EN</NuxtLink>
  </nav>
  {{ t("alt.banner.books") }}
  <NuxtPage />
</template>

<style>
nav {
  display: flex;
  gap: 1rem;
  padding: 1rem;
}
</style>
' > ./app/pages/demo/languages.vue

# a composable for language stuff
echo 'import { useI18n, useLocalePath, useSwitchLocalePath } from "#imports";
import type { MessageSchema } from "~~/types/i18n"; // ~~ is an alias for the src directory

export enum Languages {
  ENGLISH = "en",
  FRENCH = "fr",
  DUTCH = "nl",
  GERMAN = "de",
}

export const languageLabels: Record<Languages, string> = {
  [Languages.DUTCH]: "Nederlands",
  [Languages.FRENCH]: "Français",
  [Languages.GERMAN]: "Deutsch",
  [Languages.ENGLISH]: "English",
};

export const defaultListLang: Record<string, string> = {
  [Languages.DUTCH]: "info_nl",
  [Languages.FRENCH]: "info_fr",
  [Languages.GERMAN]: "pdf_de",
};

export function useLanguage() {
  const { t, locale, setLocale } = useI18n<
    [MessageSchema],
    Languages.DUTCH | Languages.FRENCH | Languages.ENGLISH | Languages.GERMAN
  >();
  const switchLocalePath = useSwitchLocalePath();

  return {
    t,
    locale,
    switchLocalePath,
    setLocale,
  };
}
' > ./app/composables/useLanguage.ts

echo '<script setup lang="ts">
import { watch, ref, reactive, computed } from 'vue';

import { useLanguage, Languages, defaultListLang, languageLabels } from '@/composables/useLanguage';

const { t, locale, switchLocalePath } = useLanguage();

const mailinglistLabels = (lang: Languages) => {
    const langMap = {
        [Languages.DUTCH]: "general.message.mailman.letter.nl",
        [Languages.FRENCH]: "general.message.mailman.letter.fr",
        [Languages.GERMAN]: "general.message.mailman.letter.de",
        [Languages.ENGLISH]: "general.message.mailman.letter.en",
    };

    return langMap[lang] || "Onbekend";
};

const form = reactive({
    usermail: '',
    selected: '', // has value like 'info_nl', 'info_fr', 'pdf_de'
    isSubmitting: false,
    userFeedbackMessage: '',
});

const resetForm = () => {
    form.usermail = '';
    form.selected = defaultListLang[form.selected] || '';
    form.isSubmitting = false;
    form.userFeedbackMessage = '';
};

// locale determins the default list, for example if locale is 'nl' the default list will be 'info_nl'
const defaultList = computed(() => {
    return defaultListLang[locale.value as Languages];
});

// fill form.selected with the defaultList value depending on the locale
form.selected = defaultList.value || 'info_fr';

// Validation PRE submit request to mailman
const emailIsValid = computed(() => {
    const emailPattern = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return form.usermail.length > 0 && emailPattern.test(form.usermail.toLowerCase());
});
const isSelectedListValid = computed(() => {
    return Object.values(defaultListLang).includes(form.selected);
});
const formIsValid = computed(() => {
    return emailIsValid.value && isSelectedListValid.value;
});

const formDirty = ref({
    email: false,
    mailinglist: false,
});

const clearAllDirty = () => {
    Object.entries(formDirty.value).forEach((el) => {
        const [k,] = el
        formDirty.value[k] = false
    });
}
const makeAllDirty = () => {
    Object.entries(formDirty.value).forEach((el) => {
        const [k,] = el
        formDirty.value[k] = true
    });
};

const formFieldsErrorIndicator = computed(() => {
    return {
        email: formDirty.value.email && !emailIsValid.value,
        mailinglist: formDirty.value.mailinglist && !isSelectedListValid.value,
    };
});

const params = computed(() => {
    return {
        email: form.usermail?.replace(/([\"\'\|]\)/g, \'\\\\\'),
        \'login-remind\': \'Subscribe\',
    };
});

const queryString = computed(() => {
    return Object.entries(params.value)
        .map(([key, val]) => \`${key}=${encodeURIComponent(val)}\`)
        .join(\'&\');
});

const fetchData = async () => {
    try {
        const response = await fetch(
            \`https://mailman.const-court.be/mailman/subscribe/\${form.selected}\`,
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: queryString.value,
            }
        );

        if (!response.ok) {
            throw new Error(\`Network response was not ok: \${response.statusText}\`);
        }

        responseData.value = await response.text();
    } catch (error) {
        console.error('Error fetching data:', error);
        // todo: implement a better message for this case and add the translations
        form.userFeedbackMessage = 'Er is een fout opgetreden bij het aanmelden. Probeer het later opnieuw.';
    }
};

const submitRequest = async () => {
    form.isSubmitting = true;

    makeAllDirty();
    await fetchData();

    if (mailmanSubmitIsValid.value) {
        form.userFeedbackMessage = userFeedbackMessages[locale.value as Locale] || '';
    } else if (emailsSeemsInvalid.value) {
        form.userFeedbackMessage = t("general.message.mailman.subscription-invalid-email");
    } else if (subscriptionSeemsInvalid.value) {
        // toto: implement a better message for this case and add the translations
        form.userFeedbackMessage = t("general.message.mailman.subscription-failure");
    } else {
        form.userFeedbackMessage = t("general.message.mailman.subscription-failure");
    }
    form.isSubmitting = false;
};

// POST request stuff
const responseData = ref('');

const subscriptionResponse = computed(() => {
    const defaultResponse = '';
    if (!responseData.value) {
        return defaultResponse;
    }

    const bodyRegex = /<body[^>]*>((.|[\n\r])*)<\/body>/im;
    const bodyMatch = responseData.value.match(bodyRegex);
    const bodyText = bodyMatch ? bodyMatch[1] : '';

    return bodyText?.trim() || 'lege bodyText';
});

const subscriptionSeemsValid = computed(() => {
    const validSubTextRegex = new RegExp([
        'Uw aanmeldingsverzoek is ontvangen en zal zo spoedig mogelijk worden',
        'Ihr Abonnement-Antrag ist soeben eingetroffen',
        'Your subscription request has been received',
        'Votre demande d\'abonnement a'
    ].join('|'));

    return validSubTextRegex.test(subscriptionResponse.value);
});

const emailsSeemsInvalid = computed(() => {
    const invalidEmailTextRegex = new RegExp([
        'Die von Ihnen angegebene E-Mail-Adresse ist ungültig',
        'Het door u opgegeven e-mailadres is niet geldig',
        'adresse courriel fournie n\'est pas valide.'
    ].join('|'));

    return invalidEmailTextRegex.test(subscriptionResponse.value);
});

const subscriptionSeemsInvalid = computed(() => {
    const invalidSubTextRegex = new RegExp([
        'niet geldig',
        'ungültig',
        'not valid',
        'n\'est pas valide.'
    ].join('|'));

    return invalidSubTextRegex.test(subscriptionResponse.value);
});

const mailmanSubmitIsValid = computed(() => {
    return subscriptionSeemsValid.value && !emailsSeemsInvalid.value && !subscriptionSeemsInvalid.value;
});

watch(() => form.userFeedbackMessage, () => {
    setTimeout(() => { form.userFeedbackMessage = ''; }, 3000);
});

type Locale = Languages.DUTCH | Languages.FRENCH | Languages.GERMAN | Languages.ENGLISH;
// to be added in the i18n language files in the folder app/lang/json: nl.json, fr.json, de.json, en.json
const titelMessage: Record<Locale, string> = {
    nl: 'U kan zich abonneren op de nieuwsbrief van het Hof door uw e-mailadres hieronder in te voeren en op “Aanmelden” te klikken.',
    fr: 'Vous pouvez vous abonner à la newsletter de la Cour en entrant votre adresse e-mail ci-dessous et en cliquant sur "S\'inscrire".',
    de: 'Sie können den Newsletter des Gerichts abonnieren, indem Sie Ihre E-Mail-Adresse unten eingeben und auf "Abonnieren" klicken.',
    en: 'You can subscribe to the Court\'s newsletter by entering your email address below and clicking "Subscribe".',
};
const userFeedbackMessages: Record<Locale, string> = {
    nl: 'Uw aanmeldingsverzoek is ontvangen en zal zo spoedig mogelijk worden verwerkt.',
    fr: 'Votre demande d\'abonnement a été reçue et sera traitée dès que possible.',
    de: 'Ihr Abonnement-Antrag ist soeben eingetroffen und wird so bald wie möglich bearbeitet.',
    en: 'Your subscription request has been received and will be processed as soon as possible.',
};

</script>

<template>
    <div class="container">
        <nav>
            <NuxtLink :to="switchLocalePath(Languages.DUTCH)">{{ languageLabels[Languages.DUTCH] }}</NuxtLink>
            <NuxtLink :to="switchLocalePath(Languages.FRENCH)">{{ languageLabels[Languages.FRENCH] }}</NuxtLink>
            <NuxtLink :to="switchLocalePath(Languages.GERMAN)">{{ languageLabels[Languages.GERMAN] }}</NuxtLink>
            <NuxtLink :to="switchLocalePath(Languages.ENGLISH)">{{ languageLabels[Languages.ENGLISH] }}</NuxtLink>
        </nav>
        <p class="description">
            {{ titelMessage[locale as Locale] }}
        </p>
        <form>
            <div class="form-group">
                <label for="mailid" class="form-label">
                    {{ t("general.email") }}
                </label>
                <input type="email" id="mailid" @blur="formDirty.email = true" class="form-input"
                    :class="{ 'error': formFieldsErrorIndicator?.email }" placeholder="John" required
                    v-model="form.usermail" />
                <p v-if="formFieldsErrorIndicator?.email" class="error-text">
                    Een geldig email adres is nodig.
                </p>
                <select @change="formDirty.mailinglist = true" class="form-input" v-model="form.selected">
                    <option v-for="(value, lang) in defaultListLang" :value="defaultListLang[lang]" :key="lang">
                        {{ t(mailinglistLabels(lang)) }}
                    </option>
                </select>
            </div>
        </form>

        <div v-if="form.userFeedbackMessage" class="feedback-message">
            {{ form.userFeedbackMessage }}
        </div>
        <div v-else>
            {{ t("newsletter.declaration") }}
        </div>

        <div class="form-footer">
            <button :disabled="form.isSubmitting || !formIsValid" @click="submitRequest" class="submit-button">
                {{ form.isSubmitting
                    ? t("general.message.mailman.subscribe-short") + "..."
                    : t("general.message.mailman.subscribe-short") }}
            </button>
        </div>
    </div>
</template>

<style scoped>
nav {
    display: flex;
    gap: 1rem;
    padding: 1rem;
}

.container {
    padding: 20px;
}

.description {
    margin-bottom: 16px;
    color: #4a4a4a;
}

.form-group {
    margin-bottom: 24px;
}

.form-label {
    display: block;
    margin-bottom: 8px;
    font-size: 14px;
    font-weight: 500;
    color: #333;
}

.form-input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 14px;
    color: #333;
}

.form-input.error {
    border-color: #e53e3e;
}

.error-text {
    margin-top: 8px;
    font-size: 12px;
    color: #e53e3e;
}

.feedback-message {
    padding: 12px;
    margin-top: 16px;
    background-color: #4a148c;
    color: white;
    font-weight: bold;
    border-radius: 4px;
}

.form-footer {
    display: flex;
    justify-content: flex-end;
    padding-top: 16px;
    border-top: 1px solid #ccc;
}

.submit-button {
    padding: 8px 16px;
    color: white;
    border-radius: 4px;
    background-color: #4a90e2;
    border: none;
    cursor: pointer;
}

.submit-button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
}
</style>
' > ./app/pages/demo/mailman.vue
